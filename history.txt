Hola este es el curso de git.

sabemos que:

* git: sistema de contol de versiones.

* git init: crea un repositorio en el directorio actual y el staged.
* Al ejecutar git init, se crea un subdirectorio de .git en el directorio de trabajo actual, 
 que contiene todos los metadatos de Git (base de datos de los cambios atómicos realizados en el proyecto)
 También se genera un archivo HEAD que apunta a la confirmación actualmente extraída.

* git config --global user.email "tu@email.com".
* git config --global user.name "Tu Nombre".
* git config --list muestra configuración actual de git.

* git add [archivo.extension]: envía  al staged los archivos creados/modificados.
* git add .: envía al stage todos los archivos creados/modificados en el directorio actual. 

* git status: muestra el estado actual de nuestro directorio.

* git show: compara los ultimos cambios realizados.
* git diff 

* commit: (confirmación de cambios) se puede entender como una captura de pantalla del estado del proyecto en un momento concreto.
 Dicha instantánea contiene además unos metadatos con el autor y el mensaje explicativo y apuntadores(padres).

* branch:  Cuando creas una rama, todo lo que Git tiene que hacer es crear un nuevo puntero, no modifica el repositorio de ninguna otra forma.
 Una rama representa una línea independiente de desarrollo. Las ramas sirven como una abstracción de los procesos de cambio, preparación y confirmación.
 Las nuevas confirmaciones se registran en el historial de la rama actual, lo que crea una bifurcación en el historial del proyecto.

* git remote add origin [url project https || ssh]: conectar repositorio remoto a nuestro repo local.

* git pull origin [local-branch] --allow-unrelated-histories: usado para forzar la union de las historias de ramas remotas y locales
* git branch --set-upstream-to=origin/<branch> branch: realizar rastreo de rama local con rama remota

* git push origin [branch1 branch2 .... branchN]: envía  al origen las ramas especificadas
* git push origin --delete [branch]: elimina una rama del repo remoto.
* git push origin :refs/tags/nombre-del-tag: elimina tag del repo remoto.

* git log --all --graph --decorate --oneline: detalla visualmente las ramas y commits realizados
* alias [nombre del comando alias]="[comando]": le colocamos un alias a un comando generalmente extension.
* git config alias.[alias] "[comando]": añade un alias en la configuración local de git para el proyecto actual.
 ejemplo-> git config alias.arbolito "log --all --graph --decorate --oneline"
* git config --global alias.[alias] "[comando]": añade un alias en la configuración global de git.


* git tag -a [tag] -m ["comentario"]: agrega tag al ultimo commit realizado
* git tag -a [tag] -m ["comentario"] [hash del commit]: agrega un tag al commit especificado y un comentario.
* git show-ref --tags: revisar lista de tags creados y sus referancias.
* git push origin --tags: envia al repo remoto los tags creados
* git tag -d [nombre del tag]:  elimina tag local.

----- git rebase -----
git rebase es el proceso de mover o combinar una secuencia de confirmaciones a una nueva confirmación base.
La razón principal para cambiar la base es mantener un historial de proyecto lineal. 
usar git rebase en repositorios remotos es un mala practica ya que reescribe el historial de git.
use git REBASE SOLO DE FORMA LOCAL si desea mantener el historial lineal de una rama especifica.
SIEMPRE hacer git rebase en la rama secundaria de la rama princial y luego moverse a la principal y hacer rebase de la secundaria para evitar conflictos en la principal.
para resolver conflictos al hacer git rebase , se deben resolver manualmente, hacer git add y luego 
git rebase --continue, si todo está ok, abre VIM para agregar un commentario al commit que se generará 

* git rebase [branch name]
* git rebase --continue

*** TAREA  ***
********* este curso fue largo, pero bastante práctico ********
********** lista tarea 1 ******

***tarea 2 ***
** sub titulo ** 
*********** tarea dos lista ********

** de nuevo en main **

***rama 2***


---------------------- git stash -------------------

El stashed nos sirve para guardar cambios para después, Es una lista de estados que nos guarda 
algunos cambios que hicimos en Staging para poder cambiar de rama sin perder el trabajo que todavía no guardamos en un commit
Ésto es especialmente útil porque hay veces que no se permite cambiar de rama, ésto porque tenemos cambios sin guardar, 
no siempre es un cambio lo suficientemente bueno como para hacer un commit, pero no queremos perder ese código en el que estuvimos trabajando.
El stashed nos permite cambiar de ramas, hacer cambios, trabajar en otras cosas y, más adelante, 
retomar el trabajo con los archivos que teníamos en Staging, pero que podemos recuperar, ya que los guardamos en el Stash.

* git stash:  coge los cambios sin confirmar (tanto los que están preparados como los que no), 
 los guarda aparte para usarlos más adelante y, acto seguido, los deshace en el código en el que estás trabajando.
* git stash list: muestra los stash relizados, ejemplo stash@{0}: WIP on main: 5002d47 our new homepage, donde:
    stash@{0}:  numero del stash
    WIP work in progress
    on main: qué rama es
    5002d47 hash de la branch
    our new homepage ultimo commit
* git stash pop: trae los cambios realizados (ultimo stash).
* git stash pop stash@{numero de stash}: trae el stash especifico.
* git stash branhc [name branch]: crea una rama con el stash realizado
* git stash drop: elimina un stash específico o el ultimo.
* git stash clear: elimina todos los stash.
* git stash apply: aplicar los cambios en el código en el que estás trabajando y conservarlos en tu stash mediante el comando.
 Esto resulta útil si quieres aplicar los mismos cambios de un stash en varias ramas.


OJO  -> Git no guardará en un stash los cambios efectuados en archivos sin seguimiento o ignorados.
De forma predeterminada, al ejecutar el comando git stash, se guardará en un stash lo siguiente:

los cambios que se hayan añadido a tu índice (cambios preparados)
los cambios efectuados en archivos de los que Git está haciendo un seguimiento (cambios sin preparar)
Pero no lo siguiente:

los archivos nuevos del código en el que estás trabajando que todavía no se hayan preparado
los archivos que se hayan ignorado
Así pues, si añadimos un tercer archivo al ejemplo anterior, pero no lo preparamos 
(es decir, si no ejecutamos el comando git add), git stash no lo guardará en el stash.

* git stash -u: (--include-untracked), se indica a git stash que también guarde en el stash los archivos sin seguimiento.
* git stash -a: (--all), incluir los cambios en los archivos ignorados
* git stash save "mensaje": Para contextualizar un poquito más, es recomendable comentar los stashes con una descripción mediante el comando.